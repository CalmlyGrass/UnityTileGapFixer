[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "paste_images",
        "kind": 2,
        "importPath": "program",
        "description": "program",
        "peekOfCode": "def paste_images(background, paste, x, y):\n    new_image = Image.new(\"RGBA\", background.size)\n    new_image.paste(background, (0, 0))\n    new_image.paste(paste, (x, y), mask=paste)\n    return new_image\ndef program_process_tileset(image, tile_size, spacing):\n    total_tile_size = tile_size + spacing\n    num_tiles_horizontal = image.width // tile_size\n    num_tiles_vertical = image.height // tile_size\n    print(num_tiles_vertical)",
        "detail": "program",
        "documentation": {}
    },
    {
        "label": "program_process_tileset",
        "kind": 2,
        "importPath": "program",
        "description": "program",
        "peekOfCode": "def program_process_tileset(image, tile_size, spacing):\n    total_tile_size = tile_size + spacing\n    num_tiles_horizontal = image.width // tile_size\n    num_tiles_vertical = image.height // tile_size\n    print(num_tiles_vertical)\n    print(num_tiles_horizontal)\n    new_width = (num_tiles_horizontal * (tile_size + spacing)) + spacing\n    new_height = (num_tiles_vertical * (tile_size + spacing)) + spacing\n    spacing_image = Image.new(\"RGBA\", (new_width, new_height))\n    for i in range(num_tiles_horizontal):",
        "detail": "program",
        "documentation": {}
    },
    {
        "label": "image_in",
        "kind": 5,
        "importPath": "program",
        "description": "program",
        "peekOfCode": "image_in = Image.open(\"input.png\")\nimage_out = program_process_tileset(image_in, 16, 2)\nimage_out.save(\"output1.png\")",
        "detail": "program",
        "documentation": {}
    },
    {
        "label": "image_out",
        "kind": 5,
        "importPath": "program",
        "description": "program",
        "peekOfCode": "image_out = program_process_tileset(image_in, 16, 2)\nimage_out.save(\"output1.png\")",
        "detail": "program",
        "documentation": {}
    }
]